/*LAB#5 Huallpa Quino Mauricio R.
        Zambrana Morales Ana Paola
        a)Estructura de Datos dinamicas NO lineales : Arboles */
/*
   Un Arbol consta de un Conjunto finitos de elementos [NODOS] y un confuntos finitos de lineas dirigidas[RAMAS]
   
                 [A1]  -->Nodo Raiz     ..............Nivel 0
                /    \
              [A2]   [A3] -->Nodo Hijo  ..............Nivel 1
             /    \      \
           [A4]   [A5]   [A6] -->Hoja   ..............Nivel 2
           /      /  \    
         [A7]   [A8] [A9]               ..............Nivel 3   */
         
#include<iostream>
#include<conio.h>
#include<stdlib.h>

using namespace std;

struct Nodo{    //estructura de un arbol
 int dato;
 Nodo *der;
 Nodo *izq;
 Nodo *padre;
};

// prototipos de funciones //
void menu();
Nodo *crearNodo(int, Nodo *);
void insertarNodo(Nodo *&,int, Nodo *);
void mostrarArbol(Nodo *, int);
bool busqueda(Nodo *, int);
void preOrden(Nodo *);
void inOrden(Nodo *);
void postOrden(Nodo *);
void eliminar(Nodo *, int);
void eliminarNodo(Nodo *);
Nodo *minimo(Nodo*);
void reemplazar(Nodo *, Nodo *);
void destruirNodo(Nodo *);

Nodo *arbol = NULL;

int main(){ 

system("color 3F");

 menu();
 

 getch();
 return 0;
}

void menu(){
  int dato,opcion, cont=0;
  do{
  	cout<<"\n _________________________________________________________________";
	cout<<"\n |                                                               |";
	cout<<"\n |  LAB#5   HUALLPA QUINO MAURICIO RODRIGO             ETN-307L  |";
	cout<<"\n |          ZAMBRANA MORALES ANA PAOLA                           |";
	cout<<"\n |_______________________________________________________________|";
	cout<<"\n\n Estructura de Datos dinamicas NO lineales (ARBOLES) en C++ \n";
    cout<<" ------------------------------Menu-----------------------------"<<endl;
    cout<<" 1.Insertar un nuevo nodo "<<endl;
    cout<<" 2.Mostrar el Arbol completo"<<endl;
    cout<<" 3.Buscar un elemento en el arbol"<<endl;
    cout<<" 4.Recorrer el arbol en pre orden"<<endl;   //Recursiva: Función o Procedimiento que se llama a sí mismo//
    cout<<" 5.Recorrer el arbol en In Orden"<<endl;
    cout<<" 6.Recorrer el arbol en post Orden"<<endl;
    cout<<" 7.Eliminar un Elemento"<<endl;
    cout<<" 8.Salir"<<endl;
    cout<<" ---------------------------------------------------------------"<<endl;
    cout<<" opcion: ";   cin>>opcion;
  
   switch(opcion){
     case 1: cout<<"\n\t Digite un numero:";
        cin>>dato;
     
        insertarNodo(arbol,dato,NULL);
        cout<<"\n";
        system("pause");
        break;
     case 2: cout<<"\n MOSTRANDO ARBOL COMPLETO:\n\n";
        mostrarArbol(arbol,cont);
        cout<<"\n";
        system("pause");	
        break;
     case 3: cout<<"\n\t Digita el elemento a buscar: "; cin>>dato;
        if(busqueda(arbol,dato) == true){
          cout<<"\n El elemento a sido encontrado en el arbol\n";
        }
        else{
          cout<<"\n\t Elemento no encontrado\n";
        }
        cout<<"\n";
        system("pause");
     case 4: cout<<"\n\t Recorrido en pre orden:";
        preOrden(arbol);
        cout<<"\n\n";
        system("pause");
        break;
     case 5: cout<<"\n\t Recorriedo en In Orden:";
        inOrden(arbol);
        cout<<"\n\n";
        system("pause");
        break;
     case 6: cout<<"\n\t Recorriedo en post Orden:";
        postOrden(arbol);
        cout<<"\n\n";
        system("pause");
        break;
     case 7:
     	cout<<"\n\t Digite el numero que quiere eliminar: ";
     	cin>>dato;
     	eliminar(arbol,dato);
     	cout<<"\n";
     	system("puase");
     	break;
  }
  system("cls");
  
 }while(opcion != 8);
}

//Funcion para insertar elementos al arbol//

void insertarNodo(Nodo *&arbol, int n,Nodo *padre){
 if(arbol == NULL){       //si el arbol esta vacio
  Nodo *nuevo_nodo = crearNodo(n,padre);
  arbol = nuevo_nodo;
 }
 else{   // si el arbol tiene un nodo o mas
  int valorRaiz = arbol-> dato;    //para obtener el valor de la raiz
  if(n < valorRaiz){   //si el elemento es menor a la raiz lo ponemos a la IZQUIERDA
   insertarNodo(arbol -> izq,n,arbol);
   
  }
  else{   //si el elemento es menor a la raiz lo ponemos a la DERECHA
   insertarNodo(arbol->der,n,arbol);
  }
 }
}

// Funcion para crear un nuevo Nodo //

Nodo *crearNodo(int n, Nodo *padre){
 Nodo *nuevo_nodo = new Nodo();
 
 nuevo_nodo->dato = n;
 nuevo_nodo->der = NULL;
 nuevo_nodo->izq = NULL;
 nuevo_nodo->padre=padre;
 
 return nuevo_nodo;
}
void mostrarArbol(Nodo *arbol, int cont){
   if(arbol == NULL){  //si el arbol esta vacio//
   return;
   }
   else{// para imprimir de forma recursiva//
       mostrarArbol(arbol->der,cont+1); //se imprime primero los elementos de la derecha//
       for(int i=0;i<cont;i++){
       cout<<"     ";
   }
   cout<<arbol->dato<<endl;
   mostrarArbol(arbol->izq,cont+1);//se imprime los elementos de la izquierda //
 }
}

//Funcion para buscar un determinado Nodo//

bool busqueda(Nodo *arbol, int n){
 if(arbol == NULL){   // si el arbol esta vacio
  return false;
 }
 else if(arbol->dato == n){  //si el nodo es igual al elemento retornamos true
  return true;
 }
 else if(n < arbol ->dato){  //si el elemento es menor busca a la izquierda
  return busqueda(arbol->izq,n);
 }
 else{                       //si el elemento es menor busca a la derecha
  return busqueda(arbol->der,n);
 }
}

//para recorrer un Arbol por profundidad pueden ser de 3 tipos: PreOrden , InOrden , PostOrden//
//Para el Recorrido PreOrden, leemos el Arbol comenzando por la raiz -> ramificacion izquierda -> ramificacion derecha//

//funcion para el Recorrido en profundida - PreOrden//

void preOrden(Nodo *arbol){
 if(arbol==NULL){  // si esta vacio //
  return;
 }	
 else{
  cout<<arbol->dato<<" - "; //lee primero la raiz //
  preOrden(arbol->izq);     //despues la ramificacion izquierda//
  preOrden(arbol->der);     //Al final la ramificacion derecha//
 }
}

//Para el Recorrido InOrden, leemos el Arbol comenzando por la ramificacion izquierda -> raiz -> ramificacion derecha//

//funcion para el Recorrido en profundida - InOrden//

void inOrden(Nodo *arbol){
 if(arbol==NULL){   // si esta vacio //
  return;
 }
 else{
  inOrden(arbol->izq);      //lee primero la ramificacion izquierda //
  cout<<arbol->dato<<" - "; //despues la raiz //
  inOrden(arbol->der);      //Al final la ramificacion derecha//
 }
}

//Para el Recorrido PostOrden, leemos el Arbol comenzando por la ramificacion izquierda -> ramificacion derecha -> raiz//

//funcion para el Recorrido en profundida - PostOrden//

void postOrden(Nodo *arbol){
 if(arbol==NULL){   // si esta vacio //
  return;
 }
 else{
  postOrden(arbol->izq);    //lee primero la ramificacion izquierda //
  postOrden(arbol->der);    //despues la ramificacion derecha//
  cout<<arbol->dato<<" - "; //Al Final la raiz //
 }
}

//Funcion para reemplazar dos nodos//

void reemplazar(Nodo *arbol,Nodo *nuevoNodo){
 if(arbol->padre){
 	//arbol->padre hay que asignarle su nodo hijo
  if(arbol->dato == arbol->padre->izq->dato){
   arbol->padre->izq = nuevoNodo;
   
  }
  else if(arbol->dato == arbol->padre->der->dato){
   arbol->padre->der = nuevoNodo;
  }
 }
 if(nuevoNodo){
 	//le asignamos el nuevo nodo padre//
 	nuevoNodo->padre = arbol->padre;
 	
 }
}

//funcion para eliminar un nodo del arbol//

void eliminar(Nodo *arbol, int n){
 if(arbol==NULL){    //si el arbol esta vacio//
  return;
 }
 else if(n < arbol->dato){  //si el valor es menor//
  eliminar(arbol->izq,n);   //Busca por la izquierda//
 }
 else if(n > arbol->dato){  //si el valor es mayor//
  eliminar(arbol->der,n);   //Busca por la derecha//
}
 else{         //cuando ya se encuentra el valor , se lo elimina//
  eliminarNodo(arbol);
 }
}

// Funcion para determinar el nodo mas izquierda posible//
Nodo *minimo(Nodo *arbol){
 if(arbol == NULL){  //si el arbol esta vacio//
  return NULL;    
 }
 if(arbol->izq){    //si tiene nodo hijo izquierdo
  return minimo(arbol->izq);  //buscamos el nodo mas izquierda posible
 }
 else{  //si no tiene nodo hijo a la izquierda//
  return arbol;     //retornamos el nodo actual//
 }
}

//funcion que borra el nodo//
void destruirNodo(Nodo *nodo){
 nodo->izq =NULL;
 nodo->der =NULL;
 
 delete nodo;
}

// Funcion para buscar y eliminar un nodo cualquiera//

void eliminarNodo(Nodo *nodoEliminar){
 if(nodoEliminar->izq  && nodoEliminar->der){ //Condicion por si tiene nodo hijo a la izq y la der
  Nodo *menor = minimo(nodoEliminar->der);
  nodoEliminar->dato = menor->dato;
  eliminarNodo(menor);
 }
 else if(nodoEliminar->izq){ //tiene un nodo Hijo a la derecha
  reemplazar(nodoEliminar,nodoEliminar->izq);
  destruirNodo(nodoEliminar);
 }
 else if(nodoEliminar->der){ //tiene un nodo Hijo a la derecha
  reemplazar(nodoEliminar,nodoEliminar->der);
  destruirNodo(nodoEliminar);
 }
 else{ //No tiene Nodos Hijo//
 	reemplazar(nodoEliminar,NULL);
 	destruirNodo(nodoEliminar);
 }
}
